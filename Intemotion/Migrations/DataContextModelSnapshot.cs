// <auto-generated />
using System;
using Intemotion.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Intemotion.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Intemotion.Entities.AssociationAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssociationVariantId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int?>("ThirdRoundResultId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AssociationVariantId");

                    b.HasIndex("ThirdRoundResultId");

                    b.HasIndex("UserId");

                    b.ToTable("AssociationAnswer");
                });

            modelBuilder.Entity("Intemotion.Entities.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ConnectedUserId")
                        .HasColumnType("int");

                    b.Property<int>("GameProcessId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConnectedUserId");

                    b.HasIndex("GameProcessId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("Intemotion.Entities.ChronologyAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChronologyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int?>("ThirdRoundResultId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ChronologyId");

                    b.HasIndex("ThirdRoundResultId");

                    b.HasIndex("UserId");

                    b.ToTable("ChronologyAnswer");
                });

            modelBuilder.Entity("Intemotion.Entities.FileModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Intemotion.Entities.FirstRoundResulAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnswerId")
                        .HasColumnType("int");

                    b.Property<int?>("FirstRoundResultId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("FirstRoundResultId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("FirstRoundResulAnswer");
                });

            modelBuilder.Entity("Intemotion.Entities.FirstRoundResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AnswerCloseTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestionIndex")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FirstRoundResults");
                });

            modelBuilder.Entity("Intemotion.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FirstRoundId")
                        .HasColumnType("int");

                    b.Property<int>("GameState")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PlaneStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SecondRoundId")
                        .HasColumnType("int");

                    b.Property<int?>("ThirdRoundId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FirstRoundId");

                    b.HasIndex("SecondRoundId");

                    b.HasIndex("ThirdRoundId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Intemotion.Entities.GameProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FirstRoundResultId")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int?>("SecondRoundResultId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int?>("ThirdRoundResultId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FirstRoundResultId");

                    b.HasIndex("GameId");

                    b.HasIndex("SecondRoundResultId");

                    b.HasIndex("ThirdRoundResultId");

                    b.ToTable("GameProcesses");
                });

            modelBuilder.Entity("Intemotion.Entities.GameUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerRole")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("GameUsers");
                });

            modelBuilder.Entity("Intemotion.Entities.MelodyGuessAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("MelodyGuessVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int?>("ThirdRoundResultId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MelodyGuessVariantId");

                    b.HasIndex("ThirdRoundResultId");

                    b.HasIndex("UserId");

                    b.ToTable("MelodyGuessAnswer");
                });

            modelBuilder.Entity("Intemotion.Entities.Rounds.FirstRound.FirstRound", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("FirstRounds");
                });

            modelBuilder.Entity("Intemotion.Entities.Rounds.FirstRound.IntellectualAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<int?>("IntellectualQuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IntellectualQuestionId");

                    b.ToTable("IntellectualAnswer");
                });

            modelBuilder.Entity("Intemotion.Entities.Rounds.FirstRound.IntellectualQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FirstRoundResultId")
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionsCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FirstRoundResultId");

                    b.HasIndex("QuestionsCategoryId");

                    b.ToTable("IntellectualQuestion");
                });

            modelBuilder.Entity("Intemotion.Entities.Rounds.FirstRound.IntellectualQuestionCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FirstRoundId")
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FirstRoundId");

                    b.ToTable("IntellectualQuestionCosts");
                });

            modelBuilder.Entity("Intemotion.Entities.Rounds.FirstRound.QuestionsCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FirstRoundId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FirstRoundId");

                    b.ToTable("QuestionsCategorys");
                });

            modelBuilder.Entity("Intemotion.Entities.Rounds.SecondRound.SecondRound", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("SecondRounds");
                });

            modelBuilder.Entity("Intemotion.Entities.Rounds.SecondRound.TruthQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<bool>("IsTruth")
                        .HasColumnType("bit");

                    b.Property<int?>("SecondRoundId")
                        .HasColumnType("int");

                    b.Property<int?>("SecondRoundResultId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SecondRoundId");

                    b.HasIndex("SecondRoundResultId");

                    b.ToTable("TruthQuestions");
                });

            modelBuilder.Entity("Intemotion.Entities.Rounds.ThirdRound.Association", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ThirdRoundId")
                        .HasColumnType("int");

                    b.Property<string>("Word")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ThirdRoundId");

                    b.ToTable("Association");
                });

            modelBuilder.Entity("Intemotion.Entities.Rounds.ThirdRound.AssociationVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssociationId")
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssociationId");

                    b.ToTable("AssociationVariant");
                });

            modelBuilder.Entity("Intemotion.Entities.Rounds.ThirdRound.Chronology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ThirdRoundId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ThirdRoundId");

                    b.ToTable("Chronology");
                });

            modelBuilder.Entity("Intemotion.Entities.Rounds.ThirdRound.ChronologyItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChronologyId")
                        .HasColumnType("int");

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChronologyId");

                    b.HasIndex("FileId");

                    b.ToTable("ChronologyItem");
                });

            modelBuilder.Entity("Intemotion.Entities.Rounds.ThirdRound.MelodyGuess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.Property<int?>("ThirdRoundId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("ThirdRoundId");

                    b.ToTable("MelodyGuess");
                });

            modelBuilder.Entity("Intemotion.Entities.Rounds.ThirdRound.MelodyGuessVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<int?>("MelodyGuessId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MelodyGuessId");

                    b.ToTable("MelodyGuessVariant");
                });

            modelBuilder.Entity("Intemotion.Entities.Rounds.ThirdRound.ThirdRound", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("ThirdRounds");
                });

            modelBuilder.Entity("Intemotion.Entities.SecondRoundResulAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int?>("SecondRoundResultId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SecondRoundResultId");

                    b.HasIndex("UserId");

                    b.ToTable("SecondRoundResulAnswer");
                });

            modelBuilder.Entity("Intemotion.Entities.SecondRoundResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("QuestionIndex")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SecondRoundResults");
                });

            modelBuilder.Entity("Intemotion.Entities.SponsorBanner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("SponsorBanners");
                });

            modelBuilder.Entity("Intemotion.Entities.SponsorBannerGame", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("SponsorBannerId")
                        .HasColumnType("int");

                    b.HasKey("GameId", "SponsorBannerId");

                    b.HasIndex("SponsorBannerId");

                    b.ToTable("SponsorBannerGames");
                });

            modelBuilder.Entity("Intemotion.Entities.ThirdRoundResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AnswerCloseTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestionIndex")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("ThirdRoundState")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ThirdRoundResult");
                });

            modelBuilder.Entity("Intemotion.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Intemotion.Entities.Voucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("Intemotion.Hubs.Models.ConnectedUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GameProcessId")
                        .HasColumnType("int");

                    b.Property<bool>("IsJoin")
                        .HasColumnType("bit");

                    b.Property<string>("Nickname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GameProcessId");

                    b.HasIndex("UserId");

                    b.ToTable("ConnectedUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Intemotion.Entities.AssociationAnswer", b =>
                {
                    b.HasOne("Intemotion.Entities.Rounds.ThirdRound.AssociationVariant", "AssociationVariant")
                        .WithMany()
                        .HasForeignKey("AssociationVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Intemotion.Entities.ThirdRoundResult", null)
                        .WithMany("AssociationAnswers")
                        .HasForeignKey("ThirdRoundResultId");

                    b.HasOne("Intemotion.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Intemotion.Entities.ChatMessage", b =>
                {
                    b.HasOne("Intemotion.Hubs.Models.ConnectedUser", "ConnectedUser")
                        .WithMany("ChatMessages")
                        .HasForeignKey("ConnectedUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Intemotion.Entities.GameProcess", "GameProcess")
                        .WithMany()
                        .HasForeignKey("GameProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Intemotion.Entities.ChronologyAnswer", b =>
                {
                    b.HasOne("Intemotion.Entities.Rounds.ThirdRound.Chronology", "Chronology")
                        .WithMany()
                        .HasForeignKey("ChronologyId");

                    b.HasOne("Intemotion.Entities.ThirdRoundResult", null)
                        .WithMany("ChronologyAnswers")
                        .HasForeignKey("ThirdRoundResultId");

                    b.HasOne("Intemotion.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Intemotion.Entities.FirstRoundResulAnswer", b =>
                {
                    b.HasOne("Intemotion.Entities.Rounds.FirstRound.IntellectualAnswer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Intemotion.Entities.FirstRoundResult", null)
                        .WithMany("Answers")
                        .HasForeignKey("FirstRoundResultId");

                    b.HasOne("Intemotion.Entities.Rounds.FirstRound.IntellectualQuestion", "Question")
                        .WithMany("FirstRoundResulAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Intemotion.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Intemotion.Entities.Game", b =>
                {
                    b.HasOne("Intemotion.Entities.Rounds.FirstRound.FirstRound", "FirstRound")
                        .WithMany()
                        .HasForeignKey("FirstRoundId");

                    b.HasOne("Intemotion.Entities.Rounds.SecondRound.SecondRound", "SecondRound")
                        .WithMany()
                        .HasForeignKey("SecondRoundId");

                    b.HasOne("Intemotion.Entities.Rounds.ThirdRound.ThirdRound", "ThirdRound")
                        .WithMany()
                        .HasForeignKey("ThirdRoundId");
                });

            modelBuilder.Entity("Intemotion.Entities.GameProcess", b =>
                {
                    b.HasOne("Intemotion.Entities.FirstRoundResult", "FirstRoundResult")
                        .WithMany()
                        .HasForeignKey("FirstRoundResultId");

                    b.HasOne("Intemotion.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Intemotion.Entities.SecondRoundResult", "SecondRoundResult")
                        .WithMany()
                        .HasForeignKey("SecondRoundResultId");

                    b.HasOne("Intemotion.Entities.ThirdRoundResult", "ThirdRoundResult")
                        .WithMany()
                        .HasForeignKey("ThirdRoundResultId");
                });

            modelBuilder.Entity("Intemotion.Entities.GameUser", b =>
                {
                    b.HasOne("Intemotion.Entities.Game", "Game")
                        .WithMany("GameUsers")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Intemotion.Entities.User", "User")
                        .WithMany("GameUsers")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Intemotion.Entities.MelodyGuessAnswer", b =>
                {
                    b.HasOne("Intemotion.Entities.Rounds.ThirdRound.MelodyGuessVariant", "MelodyGuessVariant")
                        .WithMany()
                        .HasForeignKey("MelodyGuessVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Intemotion.Entities.ThirdRoundResult", null)
                        .WithMany("MelodyGuessAnswers")
                        .HasForeignKey("ThirdRoundResultId");

                    b.HasOne("Intemotion.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Intemotion.Entities.Rounds.FirstRound.IntellectualAnswer", b =>
                {
                    b.HasOne("Intemotion.Entities.Rounds.FirstRound.IntellectualQuestion", "IntellectualQuestion")
                        .WithMany("Answers")
                        .HasForeignKey("IntellectualQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Intemotion.Entities.Rounds.FirstRound.IntellectualQuestion", b =>
                {
                    b.HasOne("Intemotion.Entities.FirstRoundResult", null)
                        .WithMany("MixedQuestions")
                        .HasForeignKey("FirstRoundResultId");

                    b.HasOne("Intemotion.Entities.Rounds.FirstRound.QuestionsCategory", "QuestionsCategory")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionsCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Intemotion.Entities.Rounds.FirstRound.IntellectualQuestionCost", b =>
                {
                    b.HasOne("Intemotion.Entities.Rounds.FirstRound.FirstRound", "FirstRound")
                        .WithMany()
                        .HasForeignKey("FirstRoundId");
                });

            modelBuilder.Entity("Intemotion.Entities.Rounds.FirstRound.QuestionsCategory", b =>
                {
                    b.HasOne("Intemotion.Entities.Rounds.FirstRound.FirstRound", "FirstRound")
                        .WithMany("QuestionsCategories")
                        .HasForeignKey("FirstRoundId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Intemotion.Entities.Rounds.SecondRound.TruthQuestion", b =>
                {
                    b.HasOne("Intemotion.Entities.Rounds.SecondRound.SecondRound", null)
                        .WithMany("Questions")
                        .HasForeignKey("SecondRoundId");

                    b.HasOne("Intemotion.Entities.SecondRoundResult", null)
                        .WithMany("MixedQuestions")
                        .HasForeignKey("SecondRoundResultId");
                });

            modelBuilder.Entity("Intemotion.Entities.Rounds.ThirdRound.Association", b =>
                {
                    b.HasOne("Intemotion.Entities.Rounds.ThirdRound.ThirdRound", "ThirdRound")
                        .WithMany("Associations")
                        .HasForeignKey("ThirdRoundId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Intemotion.Entities.Rounds.ThirdRound.AssociationVariant", b =>
                {
                    b.HasOne("Intemotion.Entities.Rounds.ThirdRound.Association", "Association")
                        .WithMany("AssociationVariants")
                        .HasForeignKey("AssociationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Intemotion.Entities.Rounds.ThirdRound.Chronology", b =>
                {
                    b.HasOne("Intemotion.Entities.Rounds.ThirdRound.ThirdRound", "ThirdRound")
                        .WithMany("Chronologies")
                        .HasForeignKey("ThirdRoundId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Intemotion.Entities.Rounds.ThirdRound.ChronologyItem", b =>
                {
                    b.HasOne("Intemotion.Entities.Rounds.ThirdRound.Chronology", "Chronology")
                        .WithMany("ChronologyItems")
                        .HasForeignKey("ChronologyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Intemotion.Entities.FileModel", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Intemotion.Entities.Rounds.ThirdRound.MelodyGuess", b =>
                {
                    b.HasOne("Intemotion.Entities.FileModel", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Intemotion.Entities.Rounds.ThirdRound.ThirdRound", "ThirdRound")
                        .WithMany("MelodyGuesses")
                        .HasForeignKey("ThirdRoundId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Intemotion.Entities.Rounds.ThirdRound.MelodyGuessVariant", b =>
                {
                    b.HasOne("Intemotion.Entities.Rounds.ThirdRound.MelodyGuess", "MelodyGuess")
                        .WithMany("MelodyGuessVariants")
                        .HasForeignKey("MelodyGuessId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Intemotion.Entities.SecondRoundResulAnswer", b =>
                {
                    b.HasOne("Intemotion.Entities.Rounds.SecondRound.TruthQuestion", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Intemotion.Entities.SecondRoundResult", null)
                        .WithMany("Answers")
                        .HasForeignKey("SecondRoundResultId");

                    b.HasOne("Intemotion.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Intemotion.Entities.SponsorBanner", b =>
                {
                    b.HasOne("Intemotion.Entities.FileModel", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Intemotion.Entities.SponsorBannerGame", b =>
                {
                    b.HasOne("Intemotion.Entities.Game", "Game")
                        .WithMany("SponsorBanners")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Intemotion.Entities.SponsorBanner", "SponsorBanner")
                        .WithMany("Games")
                        .HasForeignKey("SponsorBannerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Intemotion.Entities.Voucher", b =>
                {
                    b.HasOne("Intemotion.Entities.Game", "Game")
                        .WithMany("Vouchers")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Intemotion.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Intemotion.Hubs.Models.ConnectedUser", b =>
                {
                    b.HasOne("Intemotion.Entities.GameProcess", "GameProcess")
                        .WithMany("ConnectedUsers")
                        .HasForeignKey("GameProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Intemotion.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Intemotion.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Intemotion.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Intemotion.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Intemotion.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
